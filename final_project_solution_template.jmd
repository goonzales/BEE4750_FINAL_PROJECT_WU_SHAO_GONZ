---
title: "BEE 4750/5750 Final Project"
author: "Jason Shao, Steven Wu, Julia Gonzales"
date: `j import Dates; Dates.Date(Dates.now())`
weave_options:
    term: false
    results: tex
    cache: off
---

<!-- This setups the environment and installs packages, but doesn't appear in the generated document -->
<!-- You shouldn't need to modify this -->
```julia; echo = false; results = "hidden"
using Pkg
Pkg.activate(".")
Pkg.instantiate()
```

# Part 1 - existing demand
```julia
using JuMP
using Cbc
using Plots

#define variables
generators = ["CHP","Solar","Hydro"]
p_min = [14.4,0,0]
p_max = [36,28,1.2]
varcost = [20.13,0,0]
startcost=[80*25.2] #per MW
ramp = [36,28,1.2]
minup=[1]
mindown=[3]
#demand based on Cornell Energy dashboard from 8/15 to 12/4
demandinkw = [19717,19703,18618,18623,20598,21252,21445,21433,22066,18997,18671,21058,21838,23160,24026,24118,21915,20370,21501,23465,24137,24352,25807,23295,23289,25310,25357,25845,26254,25746,23084,22920,24432,24699,25221,25279,24370,23403,23223,24998,24514,24692,24894,24923,23578,23027,24610,24495,24710,25215,24801,22605,22275,23470,23676,24776,24655,24991,23108,22987,24499,23708,24474,24365,24372,22524,22224,23831,23632,24399,24214,23698,22033,21441,22216,20062,19301,18628,18099,17442,17341,17942,17859,17577,16946,16843,15474,17528,16616,16424,16384,16782,15822,15518,16291,17020,17055,17300,17725,16964,16897,16990,17187,17383,17449,17442,17147,16747,17088,17385,17575,17503,17185,16443,16663,17477,17111,16812,16806,16911,16447,16646,17169,17069,17398,17085,17336,17243,16900,17433,17614,17355,17819,18302,16676,16611,18046,17764,17900,18024,18346,17352,17005,17244,18346,18634,19203,19841,19511,19104,19532,17961,20272,20226,20659,19928,19060,20102,19219,21698,22714,20683,19615,19490,20360,19820,20863,21231,21022,20509,20318,21989,21617,21460,20714,20838,20235,20477,20396,19433,19340,19424,19298,19069,18528,19440,20810,21036,21203,21891,20396,19341,19420,19226,19461,19557,19557,19119,19691,20935,19893,20669,21851,20917,19268,19021,22117,21844,19871,20166,19438,18766,19370,20364,21366,19859,19211,19392,18992,18652,20286,20626,20525,19726,20025,18890,18555,19592,19490,19342,19245,19661,19248,19863,21189,16517,20639,24552,21514,20439,19308,20330,15583,9576,21983,21124,20125,19605,20436,21696,23063,23235,22814,21115,21422,22596,21771,21199,21398,20730,20470,21071,22571,22255,22811,23049,23221,22092,21890,23733,23285,23233,22962,23373.5,23373.5,23373.5,23373.5,23785,22917,23071,22975,21855,21721,23039,22862,23056,22354,20879,22195,21967,23258,22970,23500,23392,23377,22187,21906,23122,23058,23532,23986,23597,22494,22247,23756,23893,24151,23653,23326,22087,22029,23511,23114,23722,23741,23687,22303,22369,23539,23649,24354,24213,23403,22118,22554,23317,22408,20582,19347,19238,19172,19251,20297,20534,20726,20819,20578,19476,19700,20745,20883,20831,20685,20445,19143,18965,20387,20963,20882,20273,20497,19875,19553,20435,20507,20215,18823,18666,18960,18889,19128,19285,19545,19134,19043]
demand = (1/1000).*demandinkw
solarcf = [0.013585,0.04799,0.010907,0.010631,0.014966,0.026204,0.023332,0.061216,0.058289,0.034322,0.023167,0.053181,0.031975,0.051165,0.048763,0.025348,0.06152,0.035454,0.047658,0.069859,0.058151,0.071074,0.064336,0.069665,0.039982,0.047051,0.03816,0.035951,0.057985,0.079799,0.038077,0.042302,0.060112,0.07516,0.01977,0.030456,0.0089739,0.049011,0.095952,0.089215,0.038767,0.056909,0.085294,0.039264,0.064281,0.10749,0.065027,0.10089,0.039099,0.083775,0.092031,0.12055,0.12329,0.1202,0.11962,0.067015,0.06105,0.098907,0.096228,0.13298,0.095676,0.062155,0.059421,0.12042,0.057212,0.12909,0.11939,0.10457,0.014993,0.083085,0.073697,0.1216,0.052822,0.15888,0.1348,0.027281,0.10578,0.046968,0.053871,0.13823,0.16981,0.026038,0.098741,0.10799,0.1419,0.11017,0.010852,0.041805,0.042854,0.051331,0.1533,0.16402,0.04001,0.079578,0.092004,0.18406,0.16241,0.102,0.072206,0.10584,0.18721,0.07447,0.043572,0.15239,0.1313,0.19143,0.11164,0.13025,0.13088,0.19525,0.053153,0.1498,0.066269,0.062762,0.15562,0.027364,0.034349,0.12315,0.11564,0.045477,0.089104,0.15156,0.20483,0.034929,0.21825,0.084935,0.13983,0.111,0.10981,0.1311,0.090927,0.17498,0.22805,0.10286,0.1163,0.18519,0.14612,0.019881,0.1765,0.22893,0.23907,0.15963,0.12467,0.17572,0.18616,0.22327,0.17854,0.079606,0.14554,0.13729,0.18751,0.2088,0.088552,0.052049,0.16032,0.16979,0.21308,0.23724,0.23559,0.23241,0.14438,0.18045,0.18323,0.22802,0.16664,0.24395,0.24351,0.23821,0.17015,0.14472,0.2286,0.20836,0.17909,0.1755,0.19831,0.16415,0.17981,0.10537,0.19395,0.23387,0.1385,0.17031,0.22004,0.18776,0.22454,0.19895,0.21595,0.21943,0.13552,0.22559,0.1559,0.14922,0.20889,0.10034,0.22504,0.22081,0.070383,0.19005,0.21971,0.16518,0.18856,0.11975,0.13375,0.1113,0.21231,0.2008,0.19928,0.20107,0.18078,0.086674,0.13257,0.2188,0.1726,0.17639,0.17307,0.048735,0.12362,0.20491,0.13047,0.19831,0.2006,0.15452,0.17017,0.18127,0.19831,0.19351,0.10697,0.19119,0.14991,0.19108,0.18265,0.20024,0.18127,0.18655,0.13905,0.16846,0.1668,0.14038,0.11561,0.096836,0.11202,0.13698,0.1258,0.061244,0.053485,0.11081,0.17782,0.12917,0.16802,0.10575,0.13814,0.16222,0.13041,0.088304,0.092556,0.046029,0.14124,0.14919,0.14524,0.052518,0.16297,0.16462,0.15388,0.16023,0.14549,0.1504,0.091286,0.13685,0.12823,0.13546,0.11951,0.025486,0.08568,0.072703,0.079827,0.10589,0.022449,0.047327,0.11898,0.045173,0.059863,0.12591,0.11307,0.1107,0.054065,0.051938,0.12205,0.10849,0.019163,0.11964,0.067456,0.0068478,0.010603,0.059504,0.038961,0.10183,0.028275,0.074801,0.0082008,0.029214,0.051994,0.0078971,0.046996,0.053347,0.023443,0.072316,0.039872,0.092666,0.072592,0.089684,0.085736,0.089657,0.087779,0.083858,0.0070411,0.022697,0.048846,0.069859,0.012205,0.018749,0.042302,0.047879,0.05539,0.057047,0.028717,0.011597,0.028302,0.027667,0.010852,0.022034,0.025072,0.016125,0.070549,0.0092501,0.010106,0.027087,0.058897,0.025845,0.034626,0.032444,0.026231,0.046554,0.017644,0.040479,0.056108,0.026563,0.026535,0.0074553,0.032334,0.027226,0.039044,0.033273,0.05053,0.036255,0.034681,0.037967,0.052767,0.024188,0.026508,0.033273,0.043323,0.023691,0.050972,0.031395,0.028082] 
G = 1:length(generators)
h = length(demand)
T = 1:h

#build model  
cost_gen_campus = Model(Cbc.Optimizer) 
@variable(cost_gen_campus,0<=y[g in G,t in T])
@variable(cost_gen_campus, c[t in T],Bin) #commitment
@variable(cost_gen_campus, start[t in T],Bin) #startup
@variable(cost_gen_campus, stop[t in T],Bin) #shutdown

@objective(cost_gen_campus,Min,sum(varcost.*sum(y[:,t] for t in T))+sum(startcost[1].*sum(start[t] for t in T)))
#gen must meet demand
@constraint(cost_gen_campus,load[t in T],sum(y[:,t])==demand[t])
#solar capacity factors
@constraint(cost_gen_campus,solarpower[t in T],y[2,t]<=p_max[2].*solarcf[t])
#min/max powers
#@constraint(cost_gen_campus,gasmin[t in T],p_min[1]<=y[1,t])
@constraint(cost_gen_campus,hydromax[t in T],y[3,t]<=p_max[3])
@constraint(cost_gen_campus,gasmax[t in T],y[1,t]<=p_max[1])
#weak ramping constraints 
@constraint(cost_gen_campus,rampup[g in G,t in 1:h-1],y[g,t+1]-y[g,t]<=ramp[g])
@constraint(cost_gen_campus,rampdown[g in G,t in 1:h-1],y[g,t]-y[g,t+1]<=ramp[g])
#start/stop constraints
@constraint(cost_gen_campus,startup[t in T], c[t]>=sum(start[s] for s in intersect(T,(t-minup[1]):t)))
@constraint(cost_gen_campus,shutdown[t in T], 1-c[t]>=sum(stop[s] for s in intersect(T,(t-mindown[1]):t)))
@constraint(cost_gen_campus,commit[t in 1:h-1], c[t+1]-c[t]==start[t+1]+stop[t+1])
#set_silent(cost_gen_campus)
optimize!(cost_gen_campus)
gen = value.(y).data

p = plot(gen',xlabel="Day",ylabel="Generated Electricity (MW)",label=permutedims(generators),title="Generation Based on 2020 Data")
```
```julia
p2=areaplot(gen',labels=permutedims(generators))
scatter!(demand, label="Demand(MW)", ylabel="Stacked Generated Electricity (MW)", xlabel="Day",title="Generation and Demand Based on 2020 Data")
```


# References

